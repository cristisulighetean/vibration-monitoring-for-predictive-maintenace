/* Generated by Edge Impulse
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/
// Generated on: 04.05.2021 09:14:33

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/kernels/micro_ops.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

namespace {

constexpr int kTensorArenaSize = 176;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[14];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[5];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,33 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0011218346189707518, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(8) int32_t tensor_data1[37] = { 0, -1403, -392, 0, 16118, 0, 19843, -837, 2481, 0, 0, 3667, 12057, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1272, -1419, -337, 0, -1402, -1437, -801, 0, 0, -1391, 18249, 1849, 0, -1368, -1434, };
const TfArray<1, int> tensor_dimension1 = { 1, { 37 } };
const TfArray<1, float> quant1_scale = { 1, { 1.17870258691255e-05, } };
const TfArray<1, int> quant1_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant1 = { (TfLiteFloatArray*)&quant1_scale, (TfLiteIntArray*)&quant1_zero, 0 };
const ALIGN(8) int32_t tensor_data2[25] = { 0, 2891, 2537, 10191, 24122, -2182, -745, 3658, 26587, 621, 0, -1834, 0, 3019, 966, 2625, 4796, 5799, 2517, 12539, 3223, 15964, 20617, -738, 0, };
const TfArray<1, int> tensor_dimension2 = { 1, { 25 } };
const TfArray<1, float> quant2_scale = { 1, { 1.641776179894805e-05, } };
const TfArray<1, int> quant2_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(8) int32_t tensor_data3[8] = { 92, 0, -116, 0, -50, 1602, 681, 0, };
const TfArray<1, int> tensor_dimension3 = { 1, { 8 } };
const TfArray<1, float> quant3_scale = { 1, { 0.00011614627146627754, } };
const TfArray<1, int> quant3_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(8) int32_t tensor_data4[2] = { -585, 585, };
const TfArray<1, int> tensor_dimension4 = { 1, { 2 } };
const TfArray<1, float> quant4_scale = { 1, { 0.0010044326772913337, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(8) int8_t tensor_data5[37*33] = { 
  -20, 1, -13, 27, -5, -23, -7, -2, -18, -16, -9, -9, -11, 9, -23, 10, -12, 8, -2, 21, 18, -23, 0, -27, -8, -26, 28, -28, 22, -6, -18, 24, 8, 
  87, -6, 9, -9, -10, 15, -24, 85, 70, 60, 51, 58, -5, -12, 26, 3, -12, -5, 70, 82, 81, 37, 63, 5, 8, 20, 16, 14, 18, 90, 70, 41, 14, 
  86, 13, 5, -7, -1, -21, 1, 37, 63, 73, 2, 82, 25, -4, -25, 27, 2, 11, 92, 110, 62, 47, 50, 18, 9, 12, 15, 17, -23, 84, 104, 23, 17, 
  -27, -17, -24, -9, 19, -22, -17, -6, 23, 19, 8, -15, -26, -3, 7, -7, 3, -9, -20, -12, -5, -3, -21, 19, -23, 22, -4, 25, 19, 8, 16, 23, -16, 
  51, 0, 24, 24, -12, -5, -21, 51, 73, 43, 10, 60, -5, -19, 3, 26, 26, 28, 47, 63, 56, 16, 26, 22, -3, 18, 15, 23, -23, 67, 35, 42, 28, 
  14, -22, 13, 0, -5, 19, -15, -6, -11, -11, 17, -26, -2, 7, 2, -11, 14, -1, -10, 8, 8, -17, -21, -16, -16, 5, 6, 12, -25, -12, 15, 0, 8, 
  -111, -22, -5, -12, 17, 26, 26, -75, -98, -74, -64, -93, 17, -4, 24, -15, -2, -22, -62, -72, -52, -33, -18, -21, -10, -27, -19, -4, 5, -88, -83, -10, 12, 
  -10, -17, 6, 10, -14, 25, -9, -20, -14, -9, -15, 5, -1, -12, 5, -4, -27, -5, 13, 10, 5, -15, 4, 8, -11, 16, -9, 10, -11, 3, -19, 2, 11, 
  68, -5, 0, -1, -13, 21, 23, 35, 54, 29, -1, 56, 25, 21, -14, 21, -17, 5, 85, 49, 52, 13, 28, 26, 12, -15, -11, 25, 5, 79, 39, 15, 24, 
  -1, -3, 7, -23, 20, -10, 23, -11, 5, -6, 8, -13, 11, -12, 19, 25, 22, 11, 16, -15, 20, -11, -5, 14, 26, 17, -1, -28, -9, 17, 1, -4, -12, 
  -22, -19, 9, 18, -19, 22, -14, -1, 7, -6, -18, -25, -16, 19, -24, 15, -18, -20, 17, 13, 3, 9, -23, 1, 26, -26, -4, -7, 19, -25, 3, -8, 21, 
  101, 10, -1, -26, -24, 9, 24, 78, 66, 54, 38, 78, 7, -23, -9, 7, 0, 5, 81, 59, 75, 38, 48, -2, -16, 14, 0, 25, -13, 85, 52, 43, -10, 
  58, 3, -11, -19, -22, 2, -5, 19, 27, 50, -8, 34, -12, -27, -20, 10, 2, -26, 50, 44, 36, 47, 32, 15, 8, 17, 19, -7, 6, 36, 62, 2, 3, 
  3, -26, -23, -21, -22, -7, 13, 23, -12, 13, 16, -25, 16, 16, -6, 22, 13, -24, 14, 8, -16, -3, -25, -7, -25, -21, -10, -8, -16, -26, 15, -4, -23, 
  -16, -1, 17, 7, -17, 25, -22, -11, -20, -22, 5, -15, -8, -12, -20, 24, 12, 2, 8, -25, 2, -12, -23, 15, 3, -4, 26, -18, -22, 11, 16, -5, 8, 
  -17, 5, -24, 8, 4, 25, 12, -7, 12, -5, 23, -4, 24, 17, 15, 10, -24, -14, -25, 18, 17, 25, -12, -15, -17, 13, 3, -21, 22, -8, 7, 8, -10, 
  -21, -8, 26, 4, 5, 15, -19, -8, -27, 24, -10, -17, -20, 24, -20, -17, -10, 1, -19, 4, -9, -25, 1, -18, -1, -1, 14, -3, -9, 19, -15, 18, 3, 
  -12, 27, 3, -9, -1, -9, 21, -25, 6, 17, -8, -11, -15, -18, 17, 22, -21, -17, -6, -14, 5, -9, -8, 18, 17, -7, -12, 24, -3, 17, 0, 12, 23, 
  -19, -9, 21, -2, -13, 0, -19, -8, -4, 16, 0, -26, 5, 19, -6, 24, 26, -24, -14, -9, -3, 21, 6, 16, -1, -21, 4, -11, 16, 26, -23, 17, 10, 
  -8, 16, 4, 9, 22, 9, -6, -3, -21, -2, -22, -3, -2, -16, -19, -11, -24, -12, -8, 6, -13, 11, -2, 24, 21, 21, -15, 2, 7, 22, -21, 2, -26, 
  -19, -26, 13, 7, 11, -14, -20, -8, 13, -14, -3, -22, 6, -16, 21, 3, 18, -1, -10, 7, 8, 5, -22, -25, 2, 17, -22, 24, -5, 18, 4, -9, -20, 
  6, 22, -7, 7, 14, -23, 4, 11, -8, -13, 20, -8, -9, 23, -1, 27, -27, -26, 3, 16, 19, 17, -16, 21, -21, 24, 17, 22, -13, -5, 22, 16, -6, 
  51, 19, -1, 14, 4, 17, -2, 42, 89, 88, 20, 42, -21, 25, 11, 16, 4, -18, 98, 85, 48, 24, 66, -8, 18, 22, 9, 27, -20, 75, 97, 46, 23, 
  82, 3, 24, 14, 21, -27, 25, 80, 90, 95, 51, 66, -5, -13, 13, 5, -25, -9, 84, 104, 48, 50, 59, -25, -3, 13, -3, -1, -9, 76, 97, 7, 4, 
  17, -10, 17, -17, -4, 1, -27, 2, 25, -4, -16, -10, -15, 13, -14, -24, 2, 8, 24, -27, -20, -14, -26, -3, -12, -3, 12, -16, 22, 26, -10, -26, -5, 
  -16, 12, 6, -3, 8, 2, -20, -23, -10, -5, 19, -6, 23, 1, -9, -10, 16, 20, 20, -4, 27, 22, -11, -20, 2, 17, 1, -25, -13, 10, -3, 16, -16, 
  114, 11, 2, 5, 3, -6, 2, 86, 63, 59, 20, 48, -25, -24, 11, 2, 15, -24, 66, 95, 70, 25, 51, 21, 0, 0, 23, 1, -19, 76, 71, -1, -20, 
  110, 17, 26, -1, -4, -2, -13, 86, 68, 94, 51, 72, 6, 24, -11, -17, -26, -3, 104, 84, 78, 41, 45, -11, 16, -12, 19, 3, 25, 83, 82, 51, 4, 
  10, -5, 6, 0, -3, 27, 5, -15, -14, 19, -5, -13, -5, -20, 5, 5, -24, 5, 22, 22, -24, -1, -2, 11, 9, -2, -26, 9, -15, -5, 3, -5, -21, 
  5, -10, 8, -20, -16, -23, 3, -28, -14, 23, -4, -25, -11, 9, 8, 0, 25, 22, 18, -14, -1, 22, -6, -23, 25, -27, 4, -21, -12, 14, 23, 2, -1, 
  -23, -6, 25, 23, -7, -16, -20, 2, -6, 26, 24, -8, 10, -19, 6, 9, 21, 28, 7, 25, -18, 3, -18, -23, 21, 26, 11, 27, -10, -16, -5, 11, -27, 
  113, -26, 10, -7, 24, 1, 13, 67, 86, 97, 33, 45, -22, -3, -17, -8, 20, 24, 68, 111, 97, 46, 68, -7, 4, 19, 26, -13, 25, 85, 127, 9, 25, 
  62, 14, 8, 4, 4, 2, -23, 20, 47, 56, 38, 57, 21, 22, 15, 19, -15, -5, 56, 41, 16, 8, 8, -21, -6, 24, 3, -3, -19, 55, 49, 33, 7, 
  77, -21, 25, -11, 18, -23, -11, 77, 70, 68, -2, 82, -22, 1, 22, 0, 26, 11, 82, 77, 72, 19, 55, -26, 7, 12, 18, -10, 27, 76, 70, 31, 36, 
  -27, -5, 13, 9, 3, -7, -16, 1, -17, 2, 4, -22, 27, -8, 8, 16, -8, -23, -11, 25, -20, -11, -19, -8, 19, 20, 7, -17, 0, 3, -21, -20, 3, 
  101, -16, -1, -6, 24, -14, 6, 60, 72, 86, 12, 43, -24, 11, 5, -23, 23, 15, 103, 98, 59, 22, 51, -4, 20, -12, -20, 1, 28, 69, 65, 49, 18, 
  105, 18, -9, -26, 8, -13, 20, 88, 87, 96, 33, 87, -16, -3, -4, 17, 10, 25, 93, 113, 43, 21, 61, -18, 23, -5, 2, 15, -21, 49, 94, 11, 2, 
};
const TfArray<2, int> tensor_dimension5 = { 2, { 37,33 } };
const TfArray<1, float> quant5_scale = { 1, { 0.010506919585168362, } };
const TfArray<1, int> quant5_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(8) int8_t tensor_data6[25*37] = { 
  -23, -29, -22, -8, -12, -28, 0, -3, 27, -5, -31, -34, -19, 23, 17, 27, -11, 16, 18, 29, -32, -17, -25, -20, 23, -21, -37, -14, 14, 6, 22, 23, -32, -5, 34, 3, 10, 
  -24, 71, 64, 17, 48, -37, -72, -8, 66, -27, 38, 28, 24, 23, 14, 14, -35, 23, 30, 30, 31, -32, 90, 53, 36, 4, 110, 58, -25, 15, 29, 75, 66, 88, 28, 51, 65, 
  -29, 44, 59, -30, 22, -7, -50, 5, 88, 29, 16, 59, 68, 20, 27, 9, 23, -20, -24, -2, -19, 1, 61, 76, -22, 5, 121, 67, 27, -5, 12, 72, 71, 82, -4, 97, 82, 
  -24, -59, -28, -35, 21, 33, 92, 34, -47, 12, -27, -11, 4, -6, -24, -14, -31, 4, -36, -19, -13, 3, -32, -49, 2, -8, -43, -71, -19, -5, 35, -74, 18, -31, 35, -58, -95, 
  5, -67, -4, -20, 30, -31, 80, 34, 17, -26, -17, -47, 46, 8, 15, 10, 15, 22, -36, -16, 20, 22, -56, -85, 13, -24, -76, -108, 29, 18, 26, -119, 38, -22, 30, -90, -97, 
  22, 65, 45, -31, -14, 30, -24, -10, 65, -7, 3, 15, 61, -16, 28, 25, 24, 31, 30, -24, -24, -11, 89, 89, 30, -32, 91, 46, -7, -32, 9, 49, 29, 73, -33, 80, 29, 
  29, 12, -12, -13, -22, -11, -5, 17, 28, 24, 22, -3, -34, 33, -23, -15, 5, 7, 21, 6, 13, 33, 17, 11, -26, -7, 13, -11, 0, 14, -6, 10, 3, 5, -36, -23, 15, 
  -20, 36, 44, 29, 63, -35, -49, -29, 76, 22, 22, 48, 45, -6, -26, -4, 4, 30, 30, 0, 7, -17, 65, 58, 23, 29, 73, 74, 1, -23, 24, 77, 77, 59, 33, 49, 26, 
  -25, -87, -1, 32, 65, -24, 81, 10, -4, 34, -10, 37, 84, -3, -5, 11, -32, 27, -24, -3, 8, -5, -15, -46, -20, 2, -76, -83, -34, -2, -31, -91, 23, -8, 5, -64, -71, 
  -10, 31, 75, -22, 26, 13, -38, 36, 60, 35, 1, 61, 35, -3, -18, 33, 22, 38, 5, -34, 18, -5, 38, 88, -25, 1, 71, 23, -16, -38, -32, 63, 41, 60, 12, 56, 69, 
  -1, 3, -10, 35, -20, 17, -32, -32, -17, 5, 33, -35, -14, -12, 33, 35, 32, 34, 16, -4, 3, 25, 3, -9, -15, -29, -35, 10, -10, 32, 0, -5, -26, -29, 2, -3, 22, 
  5, 22, 18, 16, -41, -3, -20, 13, 19, 23, -11, 24, -7, 32, 18, 23, 10, -1, 6, 6, -12, -18, -13, -9, 12, 15, 34, -40, 33, 11, 16, 11, -24, -42, 14, 30, 26, 
  25, -35, 15, 32, -17, -2, -8, -15, -24, -32, -19, -25, -34, -9, 35, 0, 24, 5, 10, 1, 2, 19, -8, -7, -34, 15, 4, 10, -22, 30, 35, -32, 37, -20, -24, 23, 4, 
  -7, 72, 74, -8, 52, 36, -28, 1, 77, -2, -34, 76, 44, 9, 30, -10, -7, -29, -20, 7, -20, -37, 57, 68, -16, 27, 42, 69, 23, -30, 10, 45, 34, 65, 0, 57, 75, 
  2, 89, 42, 28, 3, -12, -34, -13, 85, 35, 2, 64, 6, 24, 2, -30, 0, 17, -16, -10, 24, -17, 25, 59, 36, 37, 108, 58, 11, -1, 23, 31, 35, 67, 4, 87, 63, 
  30, 92, 56, -34, 73, -10, -72, 6, 70, -18, -30, 35, 69, 34, 25, 7, 9, -19, 13, -23, 6, -10, 38, 48, 6, -29, 72, 93, 4, -8, 5, 67, 42, 10, -24, 69, 82, 
  -11, -33, -28, -27, 13, -28, 58, -30, -9, -6, 2, -7, -29, 1, 2, 16, -22, 35, 32, 3, -26, 16, -10, -59, -13, -13, -14, -36, 3, 37, -2, -15, 27, -36, 20, -71, -34, 
  33, 77, 39, 28, 78, 11, -48, -11, 64, 23, 17, 82, 66, -22, -24, -14, -4, 24, -12, -8, -5, 32, 65, 40, 19, 17, 60, 83, -15, 9, 13, 54, 72, 54, -30, 82, 89, 
  24, 67, 82, -27, 65, -9, -67, -25, 66, -3, 1, 72, 17, 8, 3, -28, 34, 19, -6, 33, 35, 14, 53, 73, -37, -12, 85, 87, -21, 4, 5, 79, 21, 76, -29, 66, 103, 
  12, -93, -12, 36, 11, -6, 95, 9, -21, 35, -13, -37, -35, -24, 6, 19, -12, 15, -20, 22, -13, 33, -14, -74, 11, -11, -112, -68, -9, 19, 34, -82, 37, -35, -37, -21, -62, 
  10, -47, -11, -34, 34, -19, 26, 25, -39, -22, -18, -30, 15, -8, 3, -12, -34, 0, 8, 7, 29, 38, -21, -23, -32, -21, 10, 6, 23, -37, 4, -62, 8, -21, -11, -10, 1, 
  -18, -43, -59, 31, 0, -2, 85, -17, -20, -37, 26, -7, 26, -12, -17, -30, 17, -21, 30, 30, 4, -22, -32, -46, -16, -29, -102, -48, -25, -4, -37, -99, 47, -32, -28, -40, -79, 
  9, -76, -58, 24, 26, -8, 120, 16, -16, -37, -23, -2, 16, -30, 33, 22, -2, -34, -33, 12, 10, 35, -67, -72, 10, 19, -127, -76, 18, 12, 0, -64, 17, -13, 15, -67, -98, 
  -22, 32, 26, -26, -10, -6, 9, 1, 22, 23, 32, -6, -18, 21, 22, -31, -25, -2, 4, -24, -22, 1, -37, 0, 9, -14, 36, -30, -3, -31, -23, 8, 1, -30, 15, 13, -4, 
  -20, -27, -2, -13, -32, -30, -33, 34, 15, -20, -29, -35, -20, 14, -10, -1, -24, 19, -16, 36, 20, 3, -13, -18, -35, -10, 25, -22, -6, 34, -3, -8, 33, 3, 4, -35, -19, 
};
const TfArray<2, int> tensor_dimension6 = { 2, { 25,37 } };
const TfArray<1, float> quant6_scale = { 1, { 0.0081524588167667389, } };
const TfArray<1, int> quant6_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(8) int8_t tensor_data7[8*25] = { 
  -16, 80, 64, -109, -61, 73, -32, 105, 15, 66, -39, -34, 11, 96, 106, 71, -33, 93, 59, -95, -33, -118, -86, -46, 30, 
  32, 45, 13, 37, 32, -46, -44, -39, -40, -6, -21, 6, 30, -43, 3, -11, -30, -49, 16, -15, -24, 8, -50, 26, 3, 
  -55, -39, 18, 7, 13, 49, -53, 34, 39, -56, 9, -39, -48, 34, -58, -33, -7, -49, -51, 33, 3, -13, -38, 9, 25, 
  -49, 30, -1, -7, -53, -34, 22, -11, -28, -6, 34, -15, 53, -38, -18, -52, 35, -2, -35, -10, 18, -22, -39, 15, 38, 
  -5, 24, -14, 5, 14, -11, 44, 0, -33, 49, -9, 52, 46, -34, 34, 3, 5, 1, -53, -16, 11, 25, -50, -9, 48, 
  -5, 13, 13, 45, 127, -32, 52, 25, 126, -12, 31, -18, -11, 15, 4, -4, 29, 45, -4, 39, 85, 120, 115, 17, 42, 
  -49, 119, 94, -75, -98, 77, -38, 113, -43, 92, 19, 14, 8, 69, 105, 107, -83, 112, 115, -116, -33, -101, -104, 52, 9, 
  46, -2, -5, -49, 50, -31, 4, 18, 2, -47, 54, 19, 39, 42, -26, -6, -55, -9, -19, 15, -20, 8, -50, -47, 2, 
};
const TfArray<2, int> tensor_dimension7 = { 2, { 8,25 } };
const TfArray<1, float> quant7_scale = { 1, { 0.0076511283405125141, } };
const TfArray<1, int> quant7_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(8) int8_t tensor_data8[2*8] = { 
  79, -41, 50, -27, -62, -127, 23, -65, 
  -84, 30, -63, 60, 5, 87, -121, -66, 
};
const TfArray<2, int> tensor_dimension8 = { 2, { 2,8 } };
const TfArray<1, float> quant8_scale = { 1, { 0.0099447816610336304, } };
const TfArray<1, int> quant8_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const TfArray<2, int> tensor_dimension9 = { 2, { 1,37 } };
const TfArray<1, float> quant9_scale = { 1, { 0.0020138416439294815, } };
const TfArray<1, int> quant9_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const TfArray<2, int> tensor_dimension10 = { 2, { 1,25 } };
const TfArray<1, float> quant10_scale = { 1, { 0.015180280432105064, } };
const TfArray<1, int> quant10_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const TfArray<2, int> tensor_dimension11 = { 2, { 1,8 } };
const TfArray<1, float> quant11_scale = { 1, { 0.10100097954273224, } };
const TfArray<1, int> quant11_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const TfArray<2, int> tensor_dimension12 = { 2, { 1,2 } };
const TfArray<1, float> quant12_scale = { 1, { 0.25335395336151123, } };
const TfArray<1, int> quant12_zero = { 1, { 53 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<2, int> tensor_dimension13 = { 2, { 1,2 } };
const TfArray<1, float> quant13_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant13_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfLiteFullyConnectedParams opdata0 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs0 = { 3, { 0,5,1 } };
const TfArray<1, int> outputs0 = { 1, { 9 } };
const TfLiteFullyConnectedParams opdata1 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs1 = { 3, { 9,6,2 } };
const TfArray<1, int> outputs1 = { 1, { 10 } };
const TfLiteFullyConnectedParams opdata2 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs2 = { 3, { 10,7,3 } };
const TfArray<1, int> outputs2 = { 1, { 11 } };
const TfLiteFullyConnectedParams opdata3 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs3 = { 3, { 11,8,4 } };
const TfArray<1, int> outputs3 = { 1, { 12 } };
const TfLiteSoftmaxParams opdata4 = { 1 };
const TfArray<1, int> inputs4 = { 1, { 12 } };
const TfArray<1, int> outputs4 = { 1, { 13 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 48, (TfLiteIntArray*)&tensor_dimension0, 33, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 148, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant1))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 100, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 1221, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 925, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension9, 37, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 48, (TfLiteIntArray*)&tensor_dimension10, 25, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension11, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 16, (TfLiteIntArray*)&tensor_dimension12, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension13, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static TfLiteStatus AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                                 size_t bytes, void** ptr) {
  if (current_location - bytes < tensor_boundary) {
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    *ptr = malloc(bytes);
    if (*ptr == NULL) {
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return kTfLiteError;
    }
    overflow_buffers.push_back(*ptr);
    return kTfLiteOk;
  }

  current_location -= bytes;

  *ptr = current_location;
  return kTfLiteOk;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  scratch_buffer_t b;
  b.bytes = bytes;

  TfLiteStatus s = AllocatePersistentBuffer(ctx, b.bytes, &b.ptr);
  if (s != kTfLiteOk) {
    return s;
  }

  scratch_buffers.push_back(b);

  *buffer_idx = scratch_buffers.size() - 1;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}
} // namespace

  TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 14;
  for(size_t i = 0; i < 14; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_FULLY_CONNECTED] = *tflite::ops::micro::Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = *tflite::ops::micro::Register_SOFTMAX();

  for(size_t i = 0; i < 5; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
    tflNodes[i].custom_initial_data = nullptr;
    tflNodes[i].custom_initial_data_size = 0;
    if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for(size_t i = 0; i < 5; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  13, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for(size_t i = 0; i < 5; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
